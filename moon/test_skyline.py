import os
import unittest
from unittest.mock import MagicMock

import cv2
import numpy as np

from moon.skyline import skyline, draw_skyline, find_peaks


class SkylineTest(unittest.TestCase):
    def test_usage(self):
        img = cv2.imread(os.path.join(os.path.dirname(__file__), 'test_data', 'skyline.jpg'))
        self.assertEqual(img.shape, (480, 640, 3))

        s = skyline(img)
        self.assertEqual(len(s), 640)
        img2 = draw_skyline(img, s)
#        cv2.imshow('debug', img2)
#        cv2.waitKey(0)
#        cv2.imwrite('debug.jpg', img2)

    def test_horizon(self):
        img = np.zeros((480, 640, 3), dtype=np.uint8)
        s = skyline(img)
        self.assertEqual(len(s), 640)
        self.assertEqual(s[42], 0)

        img[100:,:,:] = 120
        s = skyline(img)
        self.assertEqual(s[42], 100)

    def test_find_peaks(self):
        s = np.zeros(640, dtype=np.uint16)
        self.assertEqual(find_peaks(s), [])

        s[:] = 100
        s[13] = 40
        self.assertEqual(find_peaks(s), [(13, 40)])

    def test_2nd_peak(self):
        s = np.zeros(640, dtype=np.uint16)
        self.assertEqual(find_peaks(s), [])

        s[:] = 100
        s[13] = 40
        s[14] = 42
        self.assertEqual(find_peaks(s), [(13, 40)])

        s[115] = 42
        self.assertEqual(find_peaks(s), [(13, 40), (115, 42)])

    def test_multiple_peaks(self):
        data = np.array([int(x) for x in """
 168 169 171 172 173 175 182 182 184 184 184 184 184 185 185 185 185 185
 186 187 189 191 192 194 195 195 196 197 198 199 200 203 206 206 206 207
 207 207 208 208 208 208 209 209 209 210 210 210 210 210 210 209 209 209
 208 208 208 207 207 206 204 203 201 200 199 198 198 197 197 196 196 196
 196 196 195 195 196 197 198 199 202 200 194 193 192 192 191 190 190 190
 190 191 192 192 193 193 194 194 195 195 196 196 197 199 202 203 208 208
 209 209 209 209 209 209 209 209 209 210 210 210 211 211 211 211 211 212
 212 212 212 212 212 213 213 213 214 214 214 213 212 211 211 211 211 211
 211 211 212 213 213 214 216 216 216 216 214 214 213 213 212 212 212 212
 212 212 212 212 213 214 216 217 218 218 218 218 218 218 214 212 212 212
 211 210 210 210 208 207 206 204 202 201 201 201 199 195 190 189 186 185
 184 184 185 185 186 186 186 187 188 188 188 189 190 190 191 192 194 195
 198 200 205 208 213 214 214 214 214 214 214 214 214 214 214 214 216 217
 219 220 222 222 223 223 223 223 223 223 223 223 223 223 223 223 223 223
 224 224 224 224 224 224 224 224 224 224 224 224 225 225 225 225 225 225
 225 225 225 225 225 225 226 226 226 226 226 226 226 226 226 226 226 226
 226 226 227 227 227 227 227 227 227 227 227 227 227 227 227 227 227 227
 227 227 227 228 228 228 228 228 228 228 228 228 228 228 228 228 228 229
 229 229 229 229 229 229 229 229 229 229 230 230 230 230 230 230 230 230
 230 230 230 231 230 230 230 228 225 220 216 211 209 206 203 201 198 198
 197 197 196 196 196 195 195 195 194 193 193 193 192 192 191 191 191 191
 190 189 189 190 192 193 195 196 197 199 208 210 211 212 213 213 214 215
 215 216 217 217 219 220 221 222 235 235 235 235 235 235 235 235 235 235
 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 237 237 237
 237 237 237 237 237 237 237 237 237 237 237 237 238 238 238 238 238 238
 238 238 238 238 238 238 238 238 239 239 239 239 239 239 239 239 239 239
 239 239 239 239 240 240 240 240 240 240 240 240 240 240 240 240 240 240
 240 240 241 241 241 241 241 241 241 241 241 241 241 241 242 242 242 242
 242 242 242 242 242 242 242 242 243 243 243 243 243 243 243 243 243 243
 243 243 244 244 244 244 244 244 244 244 244 244 244 244 245 245 245 245
 245 245 245 245 245 245 245 245 245 246 246 246 246 246 246 246 246 246
 246 246 246 246 246 247 247 247 247 247 247 247 247 247 247 247 247 247
 247 248 248 248 248 248 248 248 248 248 248 248 248 248 248 248 249 249
 249 249 249 249 249 249 249 249 249 249 249 249 249 249 250 250 250 250
 250 250 250 250 250 250 250 250 250 250 250 250 251 251 251 251 251 251
 251 251 251 251 251 251 251 251 251 251""".split()], dtype=np.int16)
        self.assertEqual(len(data), 640)

#        import matplotlib.pyplot as plt
#        plt.plot(data, 'o-', linewidth=2)
#        plt.show()

        print(find_peaks(data))

# vim: expandtab sw=4 ts=4

